package com.example.nagoyameshi.form;

import java.util.List;

import jakarta.validation.constraints.AssertTrue;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;

import org.springframework.web.multipart.MultipartFile;

import lombok.Data;

@Data
public class RestaurantRegisterForm {
    @NotBlank(message = "店舗名を入力してください。")
    private String name;

    private MultipartFile imageFile;

    @NotBlank(message = "説明を入力してください。")
    private String description;

    @NotNull(message = "最低価格帯を入力してください。")
    @Min(value = 1, message = "料金は1円以上に設定してください。")
    private Integer lowestPrice;

    @NotNull(message = "最高価格帯を入力してください。")
    @Min(value = 1, message = "料金は1円以上に設定してください。")
    private Integer highestPrice;

    @NotNull(message = "座席数を入力してください。")
    @Min(value = 1, message = "座席数は1席以上に設定してください。")
    private Integer capacity;

    @NotBlank(message = "郵便番号を入力してください。")
    private String postalCode;

    @NotBlank(message = "住所を入力してください。")
    private String address;

    @NotBlank(message = "電話番号を入力してください。")
    private String phoneNumber;
    
    @NotBlank(message = "開店時間を入力してください。")
    private String openTime;

    @NotBlank(message = "閉店時間を入力してください。")
    private String closeTime;


    // ▼ 時間入力（時・分を分離）
    @Pattern(regexp = "^([0][1-9]|1[0-9]|2[0-4])$", message = "開店時間（時）は01～24の間で入力してください。")
    private String openHour;

    @Pattern(regexp = "^[0-5][0-9]$", message = "開店時間（分）は00～59の間で入力してください。")
    private String openMinute;

    @Pattern(regexp = "^([0][1-9]|1[0-9]|2[0-4])$", message = "閉店時間（時）は01～24の間で入力してください。")
    private String closeHour;

    @Pattern(regexp = "^[0-5][0-9]$", message = "閉店時間（分）は00～59の間で入力してください。")
    private String closeMinute;

    // ▼ 時間の整合性チェック
    @AssertTrue(message = "閉店時間は開店時間より後にしてください。")
    public boolean isTimeValid() {
        if (openHour == null || openMinute == null || closeHour == null || closeMinute == null) {
            return true; // 個別バリデーションに任せる
        }

        try {
            int openH = Integer.parseInt(openHour);
            int openM = Integer.parseInt(openMinute);
            int closeH = Integer.parseInt(closeHour);
            int closeM = Integer.parseInt(closeMinute);

            int openTotal = openH * 60 + openM;
            int closeTotal = closeH * 60 + closeM;

            return openTotal < closeTotal;
        } catch (NumberFormatException e) {
            return true; // 数字以外の場合は個別パターンでエラーにするのでここではtrue
        }
    }

    @NotBlank(message = "定休日を入力してください。")
    private List<String> regularHoliday;

    @NotBlank(message = "カテゴリを入力してください。")
    private String category;
}
