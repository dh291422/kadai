package com.example.nagoyameshi.controller;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.Reservation;
import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.ReservationInputForm;
import com.example.nagoyameshi.repository.ReservationRepository;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;

@Controller
public class ReservationController {
    private final ReservationRepository reservationRepository;
    private final RestaurantRepository restaurantRepository;
    
    public ReservationController(ReservationRepository reservationRepository, RestaurantRepository restaurantRepository) {        
        this.reservationRepository = reservationRepository;
        this.restaurantRepository = restaurantRepository;
        
    }    

    @GetMapping("/reservations")
    public String index(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable, Model model) {
        User user = userDetailsImpl.getUser();
        Page<Reservation> reservationPage = reservationRepository.findByUserOrderByCreatedAtDesc(user, pageable);
        
        model.addAttribute("reservationPage", reservationPage);         
        
        return "reservations/index";
    }
    
    @GetMapping("/restaurants/{id}/reservations/input")
    public String inputReservation(
    	    @PathVariable("id") Integer id,
    	    @ModelAttribute ReservationInputForm reservationInputForm,
    	    BindingResult bindingResult,
    	    @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
    	    RedirectAttributes redirectAttributes,
    	    Model model) {

    	    Restaurant restaurant = restaurantRepository.getReferenceById(id);
    	    model.addAttribute("restaurant", restaurant);

    	    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");

    	    // 全体の時間リスト（8:00～22:00）
    	    List<String> allTimeOptions = new ArrayList<>();
    	    LocalTime start = LocalTime.of(8, 0);
    	    LocalTime end = LocalTime.of(02, 0);
    	    while (start.isBefore(end)) {
    	        allTimeOptions.add(start.format(formatter));
    	        start = start.plusMinutes(30);
    	    }

    	    // 営業時間でフィルター
    	    String[] businessHours = restaurant.getBusinessHours().split("～");
    	    LocalTime openTime = LocalTime.parse(businessHours[0], formatter);
    	    LocalTime closeTime = LocalTime.parse(businessHours[1], formatter);

    	    List<String> timeOptions = allTimeOptions.stream()
    	        .map(t -> LocalTime.parse(t, formatter))
    	        .filter(t -> !t.isBefore(openTime) && t.isBefore(closeTime))
    	        .map(t -> t.format(formatter))
    	        .toList();

    	    model.addAttribute("timeOptions", timeOptions);

    	    return "reservations/input"; // ← HTML画面名
    	}


    @PostMapping("/restaurants/{id}/reservations/confirm")
    public String confirmReservation(
        @PathVariable("id") Integer id,
        @ModelAttribute ReservationInputForm reservationInputForm,
        BindingResult bindingResult,
        @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
        RedirectAttributes redirectAttributes,
        Model model) {

        Restaurant restaurant = restaurantRepository.getReferenceById(id);
        model.addAttribute("restaurant", restaurant);

        if (bindingResult.hasErrors()) {
            redirectAttributes.addFlashAttribute("errorMessage", "予約内容に不備があります。");
            return "redirect:/restaurants/" + id + "/reservations/input";
        }

        Reservation reservation = new Reservation();
        reservation.setRestaurant(restaurant);
        reservation.setUser(userDetailsImpl.getUser());
        reservation.setCheckinDate(reservationInputForm.getCheckinDate());
        reservation.setReservationTime(reservationInputForm.getReservationTime());
        reservation.setNumberOfPeople(reservationInputForm.getNumberOfPeople());

        reservationRepository.save(reservation);

        redirectAttributes.addFlashAttribute("successMessage", "予約が完了しました♡");
        return "redirect:/reservations";
    }
    
    @PostMapping("/reservations/{id}/cancel")
    public String cancel(@PathVariable("id") Integer id,
                         @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
                         RedirectAttributes redirectAttributes) {
        Reservation reservation = reservationRepository.findById(id).orElse(null);
        
        if (reservation == null || !reservation.getUser().getId().equals(userDetailsImpl.getUser().getId())) {
            redirectAttributes.addFlashAttribute("errorMessage", "予約が見つからないか、キャンセルできません。");
            return "redirect:/reservations";
        }

        reservation.setCanceled(true);
        reservationRepository.save(reservation);

        redirectAttributes.addFlashAttribute("successMessage", "予約をキャンセルしました♡");
        return "redirect:/reservations";
    }


}