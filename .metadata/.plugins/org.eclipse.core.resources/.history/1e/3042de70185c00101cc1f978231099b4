package com.example.nagoyameshi.service;

import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.repository.UserRepository;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Subscription;
import com.stripe.model.checkout.Session;
import com.stripe.param.SubscriptionCancelParams;
import com.stripe.param.checkout.SessionCreateParams;

import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class StripeService {

    @Value("${stripe.api-key}")
    private String stripeApiKey;

    private static final String PRICE_ID = "price_1Rgc5DB6eHNhnOUxyl1DHeSp";

    private final UserRepository userRepository;

    /**
     * サブスクリプション登録用のStripeセッション作成
     */
    public String createStripeSession(HttpServletRequest request) {
        Stripe.apiKey = stripeApiKey;

        String baseUrl = request.getScheme() + "://" +
                request.getServerName() +
                (request.getServerPort() == 80 || request.getServerPort() == 443 ? "" : ":" + request.getServerPort());

        SessionCreateParams params = SessionCreateParams.builder()
                .addPaymentMethodType(SessionCreateParams.PaymentMethodType.CARD)
                .addLineItem(
                        SessionCreateParams.LineItem.builder()
                                .setPrice(PRICE_ID)
                                .setQuantity(1L)
                                .build()
                )
                .setMode(SessionCreateParams.Mode.SUBSCRIPTION)
                .setSuccessUrl(baseUrl + "/subscription/success")
                .setCancelUrl(baseUrl + "/subscription/cancel")
                .build();

        try {
            Session session = Session.create(params);
            return session.getId();
        } catch (StripeException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * ユーザーがサブスクリプション契約済みかどうか
     */
    public boolean isUserSubscribed(Long userId) {
        return userRepository.findById(userId.intValue())
                .map(User::getSubscriptionId)
                .filter(subId -> subId != null && !subId.isEmpty())
                .isPresent();
    }

    /**
     * Stripe上のサブスクリプションをキャンセルする
     */
    public void cancelSubscription(String subscriptionId) throws StripeException {
        Stripe.apiKey = stripeApiKey;

        Subscription subscription = Subscription.retrieve(subscriptionId);
        SubscriptionCancelParams params = SubscriptionCancelParams.builder().build();
        subscription.cancel(params);
    }

    /**
     * StripeのWebhook通知を処理する（登録完了時）
     */
    public void processSessionCompleted(String payload) {
        // ここでJSONからsubscriptionIdなどを取り出してDBに保存する処理を書く（必要なら）
        // 今は省略。あとでちゃんとやるならイベントパーサーが必要
        System.out.println("Stripe Webhook Payload: " + payload);
    }
}
