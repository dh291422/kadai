package com.example.nagoyameshi.controller;

import jakarta.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.PasswordReset;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.service.PasswordResetService;
import com.example.nagoyameshi.service.UserService;

@Controller
@RequestMapping("/password-reset")
public class PasswordResetController {

    private final UserService userService;
    private final PasswordResetService passwordResetService;

    public PasswordResetController(UserService userService, PasswordResetService passwordResetService) {
        this.userService = userService;
        this.passwordResetService = passwordResetService;
    }

    @GetMapping("/request")
    public String showRequestForm() {
        return "auth/reset_request";
    }

    @PostMapping("/request")
    public String handleRequest(@RequestParam("email") String email, HttpServletRequest request, Model model) {
        User user = userService.findByEmail(email);

        if (user != null) {
            String appUrl = request.getRequestURL().toString().replace(request.getRequestURI(), request.getContextPath());
            passwordResetService.sendResetEmail(user, appUrl);
            model.addAttribute("successMessage", "パスワード再設定用のリンクをメールで送信しました。");
        } else {
            model.addAttribute("errorMessage", "このメールアドレスは登録されていません。");
        }

        return "auth/reset_request";
    }
    
    @PostMapping("/reset-password")
    public String handlePasswordReset(
            @RequestParam("token") String token,
            @RequestParam("password") String password,
            @RequestParam("confirmPassword") String confirmPassword,
            Model model,
            RedirectAttributes redirectAttributes
    ) {
        PasswordReset resetToken = passwordResetService.getToken(token);

        if (resetToken == null || resetToken.isExpired()) {
            model.addAttribute("errorMessage", "トークンが無効または期限切れです。再度お試しください。");
            return "auth/reset_password";
        }

        if (!password.equals(confirmPassword)) {
            model.addAttribute("errorMessage", "パスワードが一致しません。");
            model.addAttribute("token", token); // 再表示のため
            return "auth/reset_password";
        }

        User user = resetToken.getUser();
        userService.updatePassword(user, password);
        passwordResetService.delete(resetToken); // トークンは使い終わったら削除

        redirectAttributes.addFlashAttribute("successMessage", "パスワードを再設定しました。ログインしてください。");
        return "redirect:/login";
    }

}
