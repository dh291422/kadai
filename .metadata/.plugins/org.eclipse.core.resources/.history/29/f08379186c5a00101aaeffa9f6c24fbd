package com.example.nagoyameshi.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalTime;
import java.util.UUID;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.form.RestaurantEditForm;
import com.example.nagoyameshi.form.RestaurantRegisterForm;
import com.example.nagoyameshi.repository.RestaurantRepository;

@Service
public class RestaurantService {
   private final RestaurantRepository restaurantRepository;    
   
   public RestaurantService(RestaurantRepository restaurantRepository) {
       this.restaurantRepository = restaurantRepository;        
   }    
   
   @Transactional
   public void create(RestaurantRegisterForm form) {
       Restaurant restaurant = new Restaurant();        
       MultipartFile imageFile = form.getImageFile();
       
       if (!imageFile.isEmpty()) {
           String imageName = imageFile.getOriginalFilename(); 
           String hashedImageName = generateNewFileName(imageName);
           Path filePath = Paths.get("src/main/resources/static/storage/" + hashedImageName);
           copyImageFile(imageFile, filePath);
           restaurant.setImageName(hashedImageName);
       }
       
       restaurant.setName(form.getName());                
       restaurant.setDescription(form.getDescription());
       restaurant.setLowestPrice(form.getLowestPrice());
       restaurant.setHighestPrice(form.getHighestPrice());
       restaurant.setCapacity(form.getCapacity());
       restaurant.setPostalCode(form.getPostalCode());
       restaurant.setAddress(form.getAddress());
       restaurant.setPhoneNumber(form.getPhoneNumber());

       // openTime と closeTime の設定
       restaurant.setOpenTime(LocalTime.parse(form.getOpenTime()));
       restaurant.setCloseTime(LocalTime.parse(form.getCloseTime()));

       restaurant.setRegularHoliday(form.getRegularHoliday());
       restaurant.setCategory(form.getCategory());
                   
       restaurantRepository.save(restaurant);
   }
   
   @Transactional
   public void update(RestaurantEditForm form) {
       Restaurant restaurant = restaurantRepository.getReferenceById(form.getId());        
       MultipartFile imageFile = form.getImageFile();
       
       if (!imageFile.isEmpty()) {
           String imageName = imageFile.getOriginalFilename(); 
           String hashedImageName = generateNewFileName(imageName);
           Path filePath = Paths.get("src/main/resources/static/storage/" + hashedImageName);
           copyImageFile(imageFile, filePath);
           restaurant.setImageName(hashedImageName);
       }
       
       restaurant.setName(form.getName());                
       restaurant.setDescription(form.getDescription());
       restaurant.setLowestPrice(form.getLowestPrice());
       restaurant.setHighestPrice(form.getHighestPrice());
       restaurant.setCapacity(form.getCapacity());
       restaurant.setPostalCode(form.getPostalCode());
       restaurant.setAddress(form.getAddress());
       restaurant.setPhoneNumber(form.getPhoneNumber());

       // openTime と closeTime の設定
       restaurant.setOpenTime(LocalTime.parse(form.getOpenTime()));
       restaurant.setCloseTime(LocalTime.parse(form.getCloseTime()));

       restaurant.setRegularHoliday(form.getRegularHoliday());
       restaurant.setCategory(form.getCategory());
                   
       restaurantRepository.save(restaurant);
   }
   
   // UUIDを使って生成したファイル名を返す
   public String generateNewFileName(String fileName) {
       String[] fileNames = fileName.split("\\.");                
       for (int i = 0; i < fileNames.length - 1; i++) {
           fileNames[i] = UUID.randomUUID().toString();            
       }
       return String.join(".", fileNames);
   }     
   
   // 画像ファイルを指定したファイルにコピーする
   public void copyImageFile(MultipartFile imageFile, Path filePath) {           
       try {
           Files.copy(imageFile.getInputStream(), filePath);
       } catch (IOException e) {
           e.printStackTrace();
       }          
   } 
}
