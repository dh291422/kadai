package com.example.nagoyameshi.controller;

import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.service.StripeService;
import com.example.nagoyameshi.repository.UserRepository;

import jakarta.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;

@Controller
@RequiredArgsConstructor
public class SubscriptionController {

    private final StripeService stripeService;
    private final UserRepository userRepository;

    // ✅ Stripe Checkout セッション生成用（登録ボタン押下時）
    @PostMapping("/subscription/create")
    public String createCheckoutSession(HttpServletRequest request, Model model) {
        String sessionId = stripeService.createStripeSession(request);
        model.addAttribute("sessionId", sessionId);
        return "subscription/checkout"; // JavaScriptで遷移させる画面
    }

    // ✅ Stripe登録完了画面（すでにあるもの）
    @GetMapping("/subscription/success")
    public String subscriptionSuccess(HttpServletRequest request, @AuthenticationPrincipal User user) {
        stripeService.handleSuccess(request, user);
        return "subscription/success"; // 登録完了画面（既存のもの）
    }

    // ✅ 解約処理 → 解約完了画面へ
    @PostMapping("/subscription/cancel")
    public String cancelSubscription(@AuthenticationPrincipal User user) {
        stripeService.cancelSubscription(user);
        return "subscription/cancel"; // ← cancel.html を表示
    }

    // ✅ 編集完了（仮ルート）
    @GetMapping("/subscription/edit/complete")
    public String editComplete() {
        return "subscription/edit"; // ← edit.html を表示
    }
}
