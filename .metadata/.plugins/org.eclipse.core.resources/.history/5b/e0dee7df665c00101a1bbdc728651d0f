package com.example.nagoyameshi.service;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.repository.UserRepository;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Subscription;
import com.stripe.model.checkout.Session;
import com.stripe.param.SubscriptionCancelParams;
import com.stripe.param.checkout.SessionCreateParams;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class StripeService {

    @Value("${stripe.api-key}")
    private String stripeApiKey;

    private final UserRepository userRepository;

    private static final String PRICE_ID = "price_1Rgc5DB6eHNhnOUxyl1DHeSp"; // ← 必ず正しいPrice IDに

    public String createStripeSession(HttpServletRequest httpServletRequest) {
        Stripe.apiKey = stripeApiKey;

        String baseUrl = httpServletRequest.getScheme() + "://" +
                httpServletRequest.getServerName() +
                (httpServletRequest.getServerPort() == 80 || httpServletRequest.getServerPort() == 443
                        ? ""
                        : ":" + httpServletRequest.getServerPort());

        SessionCreateParams params = SessionCreateParams.builder()
                .addPaymentMethodType(SessionCreateParams.PaymentMethodType.CARD)
                .addLineItem(SessionCreateParams.LineItem.builder()
                        .setPrice(PRICE_ID)
                        .setQuantity(1L)
                        .build())
                .setMode(SessionCreateParams.Mode.SUBSCRIPTION)
                .setSuccessUrl(baseUrl + "/subscription/success")
                .setCancelUrl(baseUrl + "/subscription/cancel")
                .build();

        try {
            Session session = Session.create(params);
            return session.getId();
        } catch (StripeException e) {
            e.printStackTrace();
            return "";
        }
    }

    public void cancelSubscription(User user) {
        Stripe.apiKey = stripeApiKey;

        try {
            System.out.println("★ 解約処理開始 for user: " + user.getEmail());

            Subscription subscription = Subscription.retrieve(user.getSubscriptionId());
            SubscriptionCancelParams params = SubscriptionCancelParams.builder().build();
            subscription.cancel(params);

            System.out.println("★ Stripe側の解約完了: " + user.getSubscriptionId());

            // DB上の subscriptionId をクリア（または isPremium=false など）
            user.setSubscriptionId(null);
            userRepository.save(user);

            System.out.println("★ ユーザー情報も更新済み");

        } catch (StripeException e) {
            e.printStackTrace();
        }
    }
}
