package com.example.nagoyameshi.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.ReservationInputForm;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.repository.ReviewRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.ReviewService;

@Controller
@RequestMapping("/restaurants")
public class RestaurantController {
    private final RestaurantRepository restaurantRepository;
	private final ReviewRepository reviewRepository;
	private final ReviewService reviewService;
	private final FavoriteRepository favoriteRepository;
	private final FavoriteService favoriteService;
    
    public RestaurantController(RestaurantRepository restaurantRepository, ReviewRepository reviewRepository, ReviewService reviewService, FavoriteRepository favoriteRepository, FavoriteService favoriteService) {
        this.restaurantRepository = restaurantRepository;
		this.reviewRepository = reviewRepository;
		this.reviewService = reviewService;
		this.favoriteRepository = favoriteRepository;
		this.favoriteService = favoriteService;
    }     
  
    @GetMapping
    public String index(@RequestParam(name = "keyword", required = false) String keyword,
                        @RequestParam(name = "area", required = false) String area,
                        @RequestParam(name = "lowestPrice", required = false) Integer lowestPrice,
                        @RequestParam(name = "order", required = false) String order,
                        @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable,
                        Model model) 
    {
        Page<Restaurant> restaurantPage;
                
        if (keyword != null && !keyword.isEmpty()) {
        	if (order != null && order.equals("priceAsc")) {
                restaurantPage = restaurantRepository.findByNameLikeOrAddressLikeOrderByLowestPriceAsc("%" + keyword + "%", "%" + keyword + "%", pageable);
            } else {
                restaurantPage = restaurantRepository.findByNameLikeOrAddressLikeOrderByCreatedAtDesc("%" + keyword + "%", "%" + keyword + "%", pageable);
            }
        } else if (area != null && !area.isEmpty()) {
        	if (order != null && order.equals("priceAsc")) {
                restaurantPage = restaurantRepository.findByAddressLikeOrderByLowestPriceAsc("%" + area + "%", pageable);
            } else {
                restaurantPage = restaurantRepository.findByAddressLikeOrderByCreatedAtDesc("%" + area + "%", pageable);
            }
        } else if (lowestPrice != null) {
        	if (order != null && order.equals("priceAsc")) {
                restaurantPage = restaurantRepository.findByLowestPriceLessThanEqualOrderByLowestPriceAsc(lowestPrice, pageable);
            } else {
                restaurantPage = restaurantRepository.findByLowestPriceLessThanEqualOrderByCreatedAtDesc(lowestPrice, pageable);
            }
        } else {
        	if (order != null && order.equals("priceAsc")) {
                restaurantPage = restaurantRepository.findAllByOrderByLowestPriceAsc(pageable);
            } else {
                restaurantPage = restaurantRepository.findAllByOrderByCreatedAtDesc(pageable);   
            }
        }                
        
        model.addAttribute("restaurantPage", restaurantPage);
        model.addAttribute("keyword", keyword);
        model.addAttribute("area", area);
        model.addAttribute("lowestPrice", lowestPrice);
        model.addAttribute("order", order);
        
        return "restaurants/index";
    }
    
    @GetMapping("/{id}")
    public String show(@PathVariable(name = "id") Integer id, Model model, @AuthenticationPrincipal UserDetailsImpl userDetailsImpl) {
        Restaurant restaurant = restaurantRepository.getReferenceById(id);
        
        boolean reviewFlag = false;
        boolean favoriteFlag = false;
        Favorite favorite = null;
        
        if (userDetailsImpl != null) {
            User user = userDetailsImpl.getUser();
            reviewFlag = reviewService.hasUserAlreadyReviewed(restaurant, user);

            favorite = favoriteService.getFavorite(restaurant, user);
            if (favorite != null) {
                favoriteFlag = true;
            }
        }
        
        model.addAttribute("reviewFlag", reviewFlag);
        model.addAttribute("favoriteFlag", favoriteFlag);
        model.addAttribute("favorite", favorite);

        List<Review> reviewList = reviewRepository.findTop6ByRestaurantOrderByCreatedAtDesc(house);
        model.addAttribute("reviewList", reviewList);

        int totalCount = (int) reviewRepository.countByHouse(restaurant);
        model.addAttribute("totalCount", totalCount);
        
        model.addAttribute("restaurant", restaurant);
        model.addAttribute("reservationInputForm", new ReservationInputForm());
        
        return "restaurants/show";
    } 
}