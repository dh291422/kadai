package com.example.nagoyameshi.controller;

import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.login.LoginUser;
import com.example.nagoyameshi.service.StripeService;
import com.example.nagoyameshi.service.UserService;

import com.stripe.model.checkout.Session;
import com.stripe.param.checkout.SessionRetrieveParams;

import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
@RequiredArgsConstructor
public class SubscriptionController {

    private final StripeService stripeService;
    private final UserService userService;

    // サブスクリプションページ表示
    @GetMapping("/subscription")
    public String showSubscriptionPage(HttpServletRequest request, Model model,
                                       @AuthenticationPrincipal LoginUser loginUser) {
        Long userId = loginUser.getUser().getId().longValue();
        boolean isSubscribed = stripeService.isUserSubscribed(userId);

        model.addAttribute("isSubscribed", isSubscribed);

        if (!isSubscribed) {
            String sessionId = stripeService.createStripeSession(request);
            if (sessionId == null || sessionId.isEmpty()) {
                model.addAttribute("errorMessage", "Stripeセッションの作成に失敗しました。");
                return "premium/error";
            }
            model.addAttribute("sessionId", sessionId);
            return "premium/register";
        } else {
            return "premium/cancel";
        }
    }

    // サブスクリプション登録完了時
    @PostMapping("/webhook/subscription")  // StripeからのWebHookを受ける
    public void handleStripeWebhook(@RequestBody String payload) {
        stripeService.processSessionCompleted(payload); // 後述のStripeServiceで処理
    }

    // 解約処理（ユーザーのsubscriptionIdを使ってStripeでキャンセル）
    @PostMapping("/subscription/cancel")
    public String cancelSubscription(@AuthenticationPrincipal LoginUser loginUser, Model model) {
        User user = loginUser.getUser();
        String subscriptionId = user.getSubscriptionId();

        if (subscriptionId == null || subscriptionId.isEmpty()) {
            model.addAttribute("errorMessage", "サブスクリプションが見つかりません。");
            return "premium/error";
        }

        try {
            stripeService.cancelSubscription(subscriptionId);
            userService.clearSubscriptionId(user.getId()); // DBから削除
            return "premium/cancel-success"; // 解約完了ページへ
        } catch (Exception e) {
            model.addAttribute("errorMessage", "解約処理中にエラーが発生しました。");
            return "premium/error";
        }
    }
}
