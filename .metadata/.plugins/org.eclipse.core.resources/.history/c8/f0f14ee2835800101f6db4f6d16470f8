package com.example.nagoyameshi.controller;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.Reservation;
import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.form.ReservationInputForm;
import com.example.nagoyameshi.repository.ReservationRepository;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;

@Controller
public class ReservationController {
    private final ReservationRepository reservationRepository;
    private final RestaurantRepository restaurantRepository;
    
    public ReservationController(ReservationRepository reservationRepository, RestaurantRepository restaurantRepository) {        
        this.reservationRepository = reservationRepository;
        this.restaurantRepository = restaurantRepository;
        
    }    

    @GetMapping("/reservations")
    public String showReservationForm(Model model) {
        // Add attributes to the model
        model.addAttribute("dates", getAvailableDates());
        model.addAttribute("times", getAvailableTimes());
        return "houses/show";
    }

    private List<LocalDate> getAvailableDates() {
        List<LocalDate> dates = new ArrayList<>();
        // Assume you're allowing reservations for the next 30 days
        LocalDate startDate = LocalDate.now();
        for (int i = 0; i < 30; i++) {
            dates.add(startDate.plusDays(i));
        }
        return dates;
    }

    private List<String> getAvailableTimes() {
        List<String> times = new ArrayList<>();
        // 30-minute intervals from 09:00 to 17:00
        LocalTime startTime = LocalTime.of(9, 0);
        LocalTime endTime = LocalTime.of(17, 0);
        while (startTime.isBefore(endTime)) {
            times.add(startTime.format(DateTimeFormatter.ofPattern("HH:mm")));
            startTime = startTime.plusMinutes(30);
        }
        return times;
    }




    @PostMapping("/restaurants/{id}/reservations/confirm")
    public String confirmReservation(
        @PathVariable("id") Integer id,
        @ModelAttribute ReservationInputForm reservationInputForm,
        BindingResult bindingResult,
        @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
        RedirectAttributes redirectAttributes,
        Model model) {

        Restaurant restaurant = restaurantRepository.getReferenceById(id);
        model.addAttribute("restaurant", restaurant);

        if (bindingResult.hasErrors()) {
            redirectAttributes.addFlashAttribute("errorMessage", "予約内容に不備があります。");
            return "redirect:/restaurants/" + id + "/reservations/input";
        }

        Reservation reservation = new Reservation();
        reservation.setRestaurant(restaurant);
        reservation.setUser(userDetailsImpl.getUser());
        reservation.setCheckinDate(reservationInputForm.getCheckinDate());
        reservation.setReservationTime(reservationInputForm.getReservationTime());
        reservation.setNumberOfPeople(reservationInputForm.getNumberOfPeople());

        reservationRepository.save(reservation);

        redirectAttributes.addFlashAttribute("successMessage", "予約が完了しました♡");
        return "redirect:/reservations";
    }
    
    @PostMapping("/reservations/{id}/cancel")
    public String cancel(@PathVariable("id") Integer id,
                         @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
                         RedirectAttributes redirectAttributes) {
        Reservation reservation = reservationRepository.findById(id).orElse(null);
        
        if (reservation == null || !reservation.getUser().getId().equals(userDetailsImpl.getUser().getId())) {
            redirectAttributes.addFlashAttribute("errorMessage", "予約が見つからないか、キャンセルできません。");
            return "redirect:/reservations";
        }

        reservation.setCanceled(true);
        reservationRepository.save(reservation);

        redirectAttributes.addFlashAttribute("successMessage", "予約をキャンセルしました♡");
        return "redirect:/reservations";
    }


}